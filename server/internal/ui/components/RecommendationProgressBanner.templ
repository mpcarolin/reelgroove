package components

import (
	"github.com/mpcarolin/cinematch-server/internal/models"
	"slices"
	"strconv"
)

type RecommendationProgressBannerViewModel struct {
    MovieId int
	CurrentRecommendationId int
    Recommendations []models.Movie
    UserLikes []string
    Settings models.RecommendationSettings
    OOB bool
}

templ RecommendationProgressBanner(data RecommendationProgressBannerViewModel) {
	<nav
        id="recommendation-progress-nav"
        if data.OOB {
            hx-swap-oob="true"
        }
    >
		<ul class="recommendation-progress-banner-list">
			for idx, recommendation := range data.Recommendations {
				{{ matchesMovie := recommendation.Id == data.CurrentRecommendationId }}
				{{ liked := IsMovieLiked(data.UserLikes, recommendation.Id) }}
				<li class={ "recommendation-progress-banner-trailer-list-item" }>
					<a href={ templ.SafeURL(models.GetRecommendationUrl(data.MovieId, recommendation.Id, &data.Settings.Autoplay)) }>
						<div
                            if matchesMovie {
                                id="active-trailer-poster"
                            }
                            class="recommendation-progress-banner-trailer-list-item-poster-container"
                        >
							<img
								class={
									"recommendation-progress-banner-trailer-poster",
									templ.KV("blur", !matchesMovie && !liked),
									templ.KV("liked", liked && !matchesMovie),
									templ.KV("active", matchesMovie),
								}
								src={ recommendation.FullPosterURL() }
								alt={ recommendation.Title }
								title={ recommendation.Title }
							/>
							if liked {
								<i class="iconoir-thumbs-up recommendation-progress-banner-trailer-like-icon"></i>
							}
						</div>
					</a>
				</li>
				if idx < len(data.Recommendations) - 1 {
					<i class="recommendation-progress-banner-trailer-connector iconoir-git-commit"></i>
				}
			}
		</ul>
        <script>
            // after htmx has swapped any content, ensure the current trailer we are watching is visible
            document.addEventListener("htmx:afterSwap", () => {
                const activeTrailerPoster = document.getElementById("active-trailer-poster");
                activeTrailerPoster.scrollIntoView({ behavior: "smooth", inline: "nearest", block: "nearest" });
            });

            

        </script>
	</nav>
}

// TODO: move
func IsMovieLiked(userLikes []string, recommendationId int) bool {
	return slices.Contains(userLikes, strconv.Itoa(recommendationId))
}