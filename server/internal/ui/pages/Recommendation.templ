package pages

import (
	"strconv"
	"slices"

	"github.com/mpcarolin/cinematch-server/internal/models"
	"github.com/mpcarolin/cinematch-server/internal/ui/components"
)

type RecommendationViewModel struct {
    MovieId int
    MovieTitle string
	CurrentRecommendationId int
    NextRecommendationId int
    Recommendations []models.Movie
    UserLikes []string
	Trailer *models.Trailer

    Settings models.RecommendationSettings
}

// Still deciding if we should show the trailer settings...
var EnableTrailerSettings = false

templ Recommendation(data *RecommendationViewModel) {
    {{ nextRecommendationUrl := models.GetNextRecommendationUrl(data.MovieId, data.Recommendations, data.CurrentRecommendationId, &data.Settings.Autoplay) }}
	<section class="recommendations-container">
		@components.RecommendationProgressBanner(components.RecommendationProgressBannerViewModel{
            MovieId: data.MovieId,
            CurrentRecommendationId: data.CurrentRecommendationId,
            Recommendations: data.Recommendations,
            UserLikes: data.UserLikes,
            Settings: data.Settings,
        })
		<div class="recommendations-trailer-buttons-container">
			@components.YouTubeVideoEmbed(data.Trailer.Key, components.VideoConfig{Autoplay: data.Settings.Autoplay})
			<div class="recommendations-trailer-actions-container">
				if EnableTrailerSettings {
					@components.TrailerSettings(components.TrailerSettingsViewModel{
                        Settings: data.Settings,
                        UpdateSettingsUrl: models.GetUpdateSettingsUrl(data.MovieId, data.CurrentRecommendationId),
                    })
				}
                @components.RecommendationButtons(components.RecommendationButtonsViewModel{
                    NextRecommendationUrl: nextRecommendationUrl,
                    LikeUrl: models.GetLikeUrl(data.MovieId, data.CurrentRecommendationId),
                    SkipUrl: models.GetSkipUrl(data.MovieId, data.CurrentRecommendationId),
                    DiveInUrl: models.GetDiveInUrl(data.CurrentRecommendationId),
                })
			</div>
            <div class="recommendations-trailer-info-container">
                @SavedRecommendations(data)
            </div>
		</div>
	</section>
}

templ SavedRecommendations(data *RecommendationViewModel) {
    <div id="saved-recommendations-container">
        {{ title := "Saved Recommendations (" + strconv.Itoa(len(data.UserLikes)) + ")" }}
        @Accordion( title, SavedRecommendationsContent(data), "")
    </div>
}

templ SavedRecommendationsContent(data *RecommendationViewModel) {
    for _, recommendation := range data.Recommendations {
        if slices.Contains(data.UserLikes, strconv.Itoa(recommendation.Id)) {
            {{ detailsURL := templ.SafeURL("https://www.themoviedb.org/movie/" + strconv.Itoa(recommendation.Id)) + "/watch" }}
            <a href={detailsURL} class="saved-recommendation-link" target="_blank">
                @components.MovieResultCard(recommendation)
            </a>
        }
    }
}

// TODO: move to components
templ Accordion(title string, content templ.Component, subtitle string) {
    <details>
        <summary>
            {title}
        </summary>
        <p class="accordion-subtitle">Click on a movie to view streaming options</p>
        @content
    </details>
}

type CardProps struct {
    Title string
    Content templ.Component
    Footer string
}

templ Card(props CardProps) {
    <article>
        <header>
            {props.Title}
        </header>
        @props.Content
        if props.Footer != "" {
            <footer>
                <small>{ props.Footer }</small>
            </footer>
        }
    </article>
}