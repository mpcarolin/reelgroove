package components

import (
	"github.com/mpcarolin/cinematch-server/internal/models"
	"math"
	"slices"
	"strconv"
)

// TODO: move these
func GetSkipUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(context.Trailer.MovieId) + "/skip"
}

func GetMaybeUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(context.Trailer.MovieId) + "/maybe"
}

func GetWatchUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(context.Trailer.MovieId) + "/watch"
}

func GetRecommendationUrl(movieId int, recommendationId int, autoplay *bool) string {
	queryString := ""
	if autoplay != nil && *autoplay == true {
		queryString = "?autoplay=on"
	}

	return "/movie/" + strconv.Itoa(movieId) + "/recommendations/" + strconv.Itoa(recommendationId) + queryString
}

// TODO: move all these to utils or something, and also reuse this one with the skip/maybe action?
func GetNextRecommendationUrl(context models.TemplateContext) string {
	currentRecommendationIndex := slices.IndexFunc(context.Recommendations, func(recommendation models.Movie) bool { return recommendation.Id == context.Trailer.MovieId })
	nextRecommendationIndex := math.Min(float64(currentRecommendationIndex+1), float64(len(context.Recommendations)-1))
	nextRecommendationId := context.Recommendations[int(nextRecommendationIndex)].Id

    // TODO: look up some go utility for query param string building
    autoplay := context.Autoplay
    queryString := ""
    if autoplay {
        queryString = "?autoplay=on"
    }
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(nextRecommendationId) + queryString
}

func GetSummaryUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/review"
}

func GetTrailerSettingsUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/trailer/settings"
}

templ Recommendations(context models.TemplateContext) {
	<div class="recommendations-container">
		@RecommendationProgressBanner(context)
		<div class="recommendations-trailer-buttons-container">
			@YouTubeVideoEmbed(context.Trailer.Key, VideoConfig{Autoplay: context.Autoplay})
			<div class="recommendations-trailer-actions-container">
				@TrailerSettings(context)
                @RecommendationButtons(context)
			</div>
		</div>
	</div>
}

templ RecommendationButtons(context models.TemplateContext) {
	<div class="recommendations-buttons-container">
		<button
			id="maybe-button"
			class="trailer-response-button"
			hx-put={ GetMaybeUrl(context) }
			hx-target=".recommendations-container"
			hx-swap="outerHTML"
			hx-push-url={ GetNextRecommendationUrl(context) }
		>
			<i class="iconoir-thumbs-up"></i>
			Like
		</button>
		<button
			id="skip-button"
			class="trailer-response-button"
			hx-put={ GetSkipUrl(context) }
			hx-target=".recommendations-container"
			hx-swap="outerHTML"
		>
			<i class="iconoir-thumbs-down"></i>
			Skip
		</button>
		<button
			id="watch-button"
			class="trailer-response-button"
			hx-put={ GetWatchUrl(context) }
			hx-target=".recommendations-container"
			hx-swap="outerHTML"
		>
			<i class="iconoir-movie"></i>
			Watch
		</button>
	</div>
}

templ TrailerSettings(context models.TemplateContext) {
	<div id="trailer-settings-container">
		<h6>Settings</h6>
		<form
			id="trailer-settings"
			hx-trigger="change"
			hx-get={ GetRecommendationUrl(context.MovieId, context.Trailer.MovieId, nil) }
			hx-target=".recommendations-container"
			hx-select=".recommendations-container"
			hx-push-url="true"
		>
			<fieldset>
				<label>
					<input
						id="autoplay-trailer-setting"
						name="autoplay"
						type="checkbox"
						role="switch"
						if context.Autoplay {
							checked
						}
					/>
					Autoplay
				</label>
			</fieldset>
		</form>
	</div>
}

// TODO: move
func IsMovieLiked(context models.TemplateContext, recommendationId int) bool {
	return slices.Contains(context.UserLikes, strconv.Itoa(recommendationId))
}

templ RecommendationProgressBanner(context models.TemplateContext) {
	<nav class="recommendation-progress-nav">
		<ul class="recommendation-progress-banner-list">
			for idx, recommendation := range context.Recommendations {
				{{ matchesMovie := recommendation.Id == context.Trailer.MovieId }}
				{{ liked := IsMovieLiked(context, recommendation.Id) }}
				<li class={ "recommendation-progress-banner-trailer-list-item" }>
					<a href={ templ.SafeURL(GetRecommendationUrl(context.MovieId, recommendation.Id, &context.Autoplay)) }>
						<div class="recommendation-progress-banner-trailer-list-item-poster-container">
							<img
								class={
									"recommendation-progress-banner-trailer-poster",
									templ.KV("blur", !matchesMovie && !liked),
									templ.KV("liked", liked && !matchesMovie),
									templ.KV("active", matchesMovie),
								}
								src={ recommendation.FullPosterURL() }
								alt={ recommendation.Title }
								title={ recommendation.Title }
							/>
							if liked {
								<i class="iconoir-thumbs-up recommendation-progress-banner-trailer-like-icon"></i>
							}
						</div>
					</a>
				</li>
				if idx < len(context.Recommendations) - 1 {
					<i class="recommendation-progress-banner-trailer-connector iconoir-git-commit"></i>
				}
			}
			<i class="more-recommendations-icon iconoir-dot-arrow-right"></i>
		</ul>
	</nav>
}
