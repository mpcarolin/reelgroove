package components

import (
	"github.com/mpcarolin/cinematch-server/internal/models"
	"slices"
	"strconv"
    "math"
)

func GetSkipUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(context.Trailer.MovieId) + "/skip"
}

func GetMaybeUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(context.Trailer.MovieId) + "/maybe"
}

func GetWatchUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(context.Trailer.MovieId) + "/watch"
}

func GetRecommendationUrl(context models.TemplateContext, recommendationId int) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(recommendationId)
}

// TODO: move all these to utils or something, and also reuse this one with the skip/maybe action?
func GetNextRecommendationUrl(context models.TemplateContext) string {
    currentRecommendationIndex := slices.IndexFunc(context.Recommendations, func(recommendation models.Movie) bool { return recommendation.Id == context.Trailer.MovieId })
    nextRecommendationIndex := math.Min(float64(currentRecommendationIndex+1), float64(len(context.Recommendations)-1))
    nextRecommendationId := context.Recommendations[int(nextRecommendationIndex)].Id
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/" + strconv.Itoa(nextRecommendationId)
}

func GetSummaryUrl(context models.TemplateContext) string {
	return "/movie/" + strconv.Itoa(context.MovieId) + "/recommendations/review"
}

templ Recommendations(context models.TemplateContext) {
	<div class="recommendations-container">
		<div class="recommendations-trailer-buttons-container">
            @YouTubeVideoEmbed(context.Trailer.Key, VideoConfig{Autoplay: true})
			<div class="recommendations-buttons">
				<button
					id="maybe-button"
					hx-put={ GetMaybeUrl(context) }
					hx-target=".recommendations-container"
					hx-swap="outerHTML"
                    hx-push-url={GetNextRecommendationUrl(context)}
					data-tooltip="We'll mark this one for you, but keep watching trailers!"
					data-placement="top"
				>
					<i class="iconoir-star-solid"></i>
					Save
				</button>
				<button
					id="skip-button"
					hx-put={ GetSkipUrl(context) }
					hx-target=".recommendations-container"
					hx-swap="outerHTML"
					data-tooltip="Move on to the next recommendation"
					data-placement="top"
				>
					<i class="iconoir-star-dashed"></i>
					Skip
				</button>
				<button
					id="watch-button"
					hx-put={ GetWatchUrl(context) }
					hx-target=".recommendations-container"
					hx-swap="outerHTML"
					data-tooltip="Stop watching trailers and see the streaming options for this one!"
					data-placement="top"
				>
					<i class="iconoir-movie"></i>
					Watch
				</button>
			</div>
		</div>
		@RecommendationProgressBanner(context)
	</div>
}

func IsMovieLiked(context models.TemplateContext, recommendationId int) bool {
	return slices.Contains(context.UserLikes, strconv.Itoa(recommendationId))
}

templ RecommendationProgressBanner(context models.TemplateContext) {
	<nav class="recommendation-progress-nav">
		<ul class="recommendation-progress-banner-list">
			for idx, recommendation := range context.Recommendations {
				{{ matchesMovie := recommendation.Id == context.Trailer.MovieId }}
				{{ liked := IsMovieLiked(context, recommendation.Id) }}
				<li class={ "recommendation-progress-banner-trailer-list-item" }>
					<a href={ templ.SafeURL(GetRecommendationUrl(context, recommendation.Id)) }>
						<div class="recommendation-progress-banner-trailer-list-item-poster-container">
							<img
								class={
									"recommendation-progress-banner-trailer-poster",
									templ.KV("blur", !matchesMovie && !liked),
									templ.KV("liked", liked && !matchesMovie),
									templ.KV("active", matchesMovie),
								}
								src={ recommendation.FullPosterURL() }
								alt={ recommendation.Title }
								title={ recommendation.Title }
							/>
							if liked {
								<i class="iconoir-star-solid recommendation-progress-banner-trailer-like-icon"></i>
							}
						</div>
					</a>
				</li>
				if idx < len(context.Recommendations) - 1 {
					<i class="recommendation-progress-banner-trailer-connector iconoir-git-commit"></i>
				}
			}
			<i class="more-recommendations-icon iconoir-dot-arrow-right"></i>
		</ul>
	</nav>
}
